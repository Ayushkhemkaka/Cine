{"ast":null,"code":"import _slicedToArray from \"C:/Users/ayush/Desktop/Ayush/cine-movie/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nvar _excluded = [\"colorSchemes\"],\n    _excluded2 = [\"colorSchemes\"],\n    _excluded3 = [\"components\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { deepmerge, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport createSpacing from '../createTheme/createSpacing';\nimport createBreakpoints from '../createTheme/createBreakpoints';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport getInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  var _baseTheme$breakpoint;\n\n  var _options$theme = options.theme,\n      baseTheme = _options$theme === void 0 ? {} : _options$theme,\n      _options$defaultMode = options.defaultMode,\n      desisgnSystemMode = _options$defaultMode === void 0 ? 'light' : _options$defaultMode,\n      designSystemColorScheme = options.defaultColorScheme,\n      _options$disableTrans = options.disableTransitionOnChange,\n      disableTransitionOnChange = _options$disableTrans === void 0 ? false : _options$disableTrans,\n      _options$enableColorS = options.enableColorScheme,\n      enableColorScheme = _options$enableColorS === void 0 ? true : _options$enableColorS,\n      _options$prefix = options.prefix,\n      designSystemPrefix = _options$prefix === void 0 ? '' : _options$prefix,\n      shouldSkipGeneratingVar = options.shouldSkipGeneratingVar;\n  var systemSpacing = createSpacing(baseTheme.spacing);\n  var systemBreakpoints = createBreakpoints((_baseTheme$breakpoint = baseTheme.breakpoints) != null ? _baseTheme$breakpoint : {});\n\n  if (!baseTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !baseTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(\"MUI: `\".concat(designSystemColorScheme, \"` does not exist in `theme.colorSchemes`.\"));\n  }\n\n  var ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  var useColorScheme = function useColorScheme() {\n    var value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"MUI: `useColorScheme` must be called under <CssVarsProvider />\" : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider(_ref) {\n    var children = _ref.children,\n        _ref$theme = _ref.theme,\n        themeProp = _ref$theme === void 0 ? {} : _ref$theme,\n        _ref$prefix = _ref.prefix,\n        prefix = _ref$prefix === void 0 ? designSystemPrefix : _ref$prefix,\n        _ref$modeStorageKey = _ref.modeStorageKey,\n        modeStorageKey = _ref$modeStorageKey === void 0 ? DEFAULT_MODE_STORAGE_KEY : _ref$modeStorageKey,\n        _ref$attribute = _ref.attribute,\n        attribute = _ref$attribute === void 0 ? DEFAULT_ATTRIBUTE : _ref$attribute,\n        _ref$defaultMode = _ref.defaultMode,\n        defaultMode = _ref$defaultMode === void 0 ? desisgnSystemMode : _ref$defaultMode,\n        _ref$defaultColorSche = _ref.defaultColorScheme,\n        defaultColorScheme = _ref$defaultColorSche === void 0 ? designSystemColorScheme : _ref$defaultColorSche;\n    // make sure that baseTheme is always independent of each <CssVarsProvider /> call.\n    // JSON.parse(JSON.stringify(...)) is okay to be used as long as the baseTheme is a plain object.\n    var clonedBaseTheme = React.useMemo(function () {\n      return JSON.parse(JSON.stringify(baseTheme));\n    }, []);\n\n    var _clonedBaseTheme$colo = clonedBaseTheme.colorSchemes,\n        baseColorSchemes = _clonedBaseTheme$colo === void 0 ? {} : _clonedBaseTheme$colo,\n        restBaseTheme = _objectWithoutPropertiesLoose(clonedBaseTheme, _excluded);\n\n    var _themeProp$colorSchem = themeProp.colorSchemes,\n        colorSchemesProp = _themeProp$colorSchem === void 0 ? {} : _themeProp$colorSchem,\n        restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded2);\n\n    var hasMounted = React.useRef(false); // eslint-disable-next-line prefer-const\n\n    var _deepmerge = deepmerge(restBaseTheme, restThemeProp),\n        _deepmerge$components = _deepmerge.components,\n        components = _deepmerge$components === void 0 ? {} : _deepmerge$components,\n        mergedTheme = _objectWithoutPropertiesLoose(_deepmerge, _excluded3);\n\n    var colorSchemes = deepmerge(baseColorSchemes, colorSchemesProp);\n    var allColorSchemes = Object.keys(colorSchemes);\n    var defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    var defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n\n    var _useCurrentColorSchem = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme: defaultLightColorScheme,\n      defaultDarkColorScheme: defaultDarkColorScheme,\n      modeStorageKey: modeStorageKey,\n      defaultMode: defaultMode\n    }),\n        mode = _useCurrentColorSchem.mode,\n        setMode = _useCurrentColorSchem.setMode,\n        systemMode = _useCurrentColorSchem.systemMode,\n        lightColorScheme = _useCurrentColorSchem.lightColorScheme,\n        darkColorScheme = _useCurrentColorSchem.darkColorScheme,\n        colorScheme = _useCurrentColorSchem.colorScheme,\n        setColorScheme = _useCurrentColorSchem.setColorScheme;\n\n    var resolvedColorScheme = function () {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    }();\n\n    var _cssVarsParser = cssVarsParser(mergedTheme, {\n      prefix: prefix,\n      basePrefix: designSystemPrefix,\n      shouldSkipGeneratingVar: shouldSkipGeneratingVar\n    }),\n        rootCss = _cssVarsParser.css,\n        rootVars = _cssVarsParser.vars;\n\n    mergedTheme = _extends({}, mergedTheme, colorSchemes[resolvedColorScheme], {\n      components: components,\n      colorSchemes: colorSchemes,\n      vars: rootVars,\n      spacing: themeProp.spacing ? createSpacing(themeProp.spacing) : systemSpacing,\n      breakpoints: themeProp.breakpoints ? createBreakpoints(themeProp.breakpoints) : systemBreakpoints\n    });\n    var styleSheet = {};\n    Object.entries(colorSchemes).forEach(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          key = _ref3[0],\n          scheme = _ref3[1];\n\n      var _cssVarsParser2 = cssVarsParser(scheme, {\n        prefix: prefix,\n        basePrefix: designSystemPrefix,\n        shouldSkipGeneratingVar: shouldSkipGeneratingVar\n      }),\n          css = _cssVarsParser2.css,\n          vars = _cssVarsParser2.vars;\n\n      mergedTheme.vars = deepmerge(mergedTheme.vars, vars);\n\n      var resolvedDefaultColorScheme = function () {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      }();\n\n      if (key === resolvedDefaultColorScheme) {\n        styleSheet[':root'] = css;\n      } else {\n        styleSheet[\"[\".concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = css;\n      }\n    });\n    React.useEffect(function () {\n      if (colorScheme) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        document.documentElement.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute]);\n    useEnhancedEffect(function () {\n      if (!mode || !enableColorScheme) {\n        return undefined;\n      }\n\n      var priorColorScheme = document.documentElement.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        document.documentElement.style.setProperty('color-scheme', systemMode);\n      } else {\n        document.documentElement.style.setProperty('color-scheme', mode);\n      }\n\n      return function () {\n        document.documentElement.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode]);\n    React.useEffect(function () {\n      var timer;\n\n      if (disableTransitionOnChange && hasMounted.current) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        var css = document.createElement('style');\n        css.appendChild(document.createTextNode(DISABLE_CSS_TRANSITION));\n        document.head.appendChild(css); // Force browser repaint\n\n        (function () {\n          return window.getComputedStyle(document.body);\n        })();\n\n        timer = setTimeout(function () {\n          document.head.removeChild(css);\n        }, 1);\n      }\n\n      return function () {\n        clearTimeout(timer);\n      };\n    }, [colorScheme]);\n    React.useEffect(function () {\n      hasMounted.current = true;\n      return function () {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode: mode,\n        setMode: setMode,\n        lightColorScheme: lightColorScheme,\n        darkColorScheme: darkColorScheme,\n        colorScheme: colorScheme,\n        setColorScheme: setColorScheme,\n        allColorSchemes: allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          ':root': rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: styleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: mergedTheme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * CSS variable prefix.\n     */\n    prefix: PropTypes.string,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  return {\n    CssVarsProvider: CssVarsProvider,\n    useColorScheme: useColorScheme,\n    getInitColorSchemeScript: getInitColorSchemeScript\n  };\n}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","_excluded2","_excluded3","React","PropTypes","GlobalStyles","deepmerge","unstable_useEnhancedEffect","useEnhancedEffect","createSpacing","createBreakpoints","cssVarsParser","ThemeProvider","getInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","_baseTheme$breakpoint","theme","baseTheme","defaultMode","desisgnSystemMode","designSystemColorScheme","defaultColorScheme","disableTransitionOnChange","enableColorScheme","prefix","designSystemPrefix","shouldSkipGeneratingVar","systemSpacing","spacing","systemBreakpoints","breakpoints","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","children","themeProp","modeStorageKey","attribute","clonedBaseTheme","useMemo","JSON","parse","stringify","baseColorSchemes","restBaseTheme","colorSchemesProp","restThemeProp","hasMounted","useRef","_deepmerge","components","mergedTheme","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","supportedColorSchemes","mode","setMode","systemMode","lightColorScheme","darkColorScheme","colorScheme","setColorScheme","resolvedColorScheme","basePrefix","rootCss","css","rootVars","vars","styleSheet","entries","forEach","key","scheme","resolvedDefaultColorScheme","useEffect","document","documentElement","setAttribute","priorColorScheme","style","getPropertyValue","setProperty","timer","current","createElement","appendChild","createTextNode","head","window","getComputedStyle","body","setTimeout","removeChild","clearTimeout","Provider","styles","propTypes","string","node","oneOfType","object"],"sources":["C:/Users/ayush/Desktop/Ayush/cine-movie/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\"],\n      _excluded2 = [\"colorSchemes\"],\n      _excluded3 = [\"components\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { deepmerge, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport createSpacing from '../createTheme/createSpacing';\nimport createBreakpoints from '../createTheme/createBreakpoints';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport getInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  var _baseTheme$breakpoint;\n\n  const {\n    theme: baseTheme = {},\n    defaultMode: desisgnSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange = false,\n    enableColorScheme = true,\n    prefix: designSystemPrefix = '',\n    shouldSkipGeneratingVar\n  } = options;\n  const systemSpacing = createSpacing(baseTheme.spacing);\n  const systemBreakpoints = createBreakpoints((_baseTheme$breakpoint = baseTheme.breakpoints) != null ? _baseTheme$breakpoint : {});\n\n  if (!baseTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !baseTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider({\n    children,\n    theme: themeProp = {},\n    prefix = designSystemPrefix,\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    attribute = DEFAULT_ATTRIBUTE,\n    defaultMode = desisgnSystemMode,\n    defaultColorScheme = designSystemColorScheme\n  }) {\n    // make sure that baseTheme is always independent of each <CssVarsProvider /> call.\n    // JSON.parse(JSON.stringify(...)) is okay to be used as long as the baseTheme is a plain object.\n    const clonedBaseTheme = React.useMemo(() => JSON.parse(JSON.stringify(baseTheme)), []);\n\n    const {\n      colorSchemes: baseColorSchemes = {}\n    } = clonedBaseTheme,\n          restBaseTheme = _objectWithoutPropertiesLoose(clonedBaseTheme, _excluded);\n\n    const {\n      colorSchemes: colorSchemesProp = {}\n    } = themeProp,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded2);\n\n    const hasMounted = React.useRef(false); // eslint-disable-next-line prefer-const\n\n    let _deepmerge = deepmerge(restBaseTheme, restThemeProp),\n        {\n      components = {}\n    } = _deepmerge,\n        mergedTheme = _objectWithoutPropertiesLoose(_deepmerge, _excluded3);\n\n    const colorSchemes = deepmerge(baseColorSchemes, colorSchemesProp);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      defaultMode\n    });\n\n    const resolvedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })();\n\n    const {\n      css: rootCss,\n      vars: rootVars\n    } = cssVarsParser(mergedTheme, {\n      prefix,\n      basePrefix: designSystemPrefix,\n      shouldSkipGeneratingVar\n    });\n    mergedTheme = _extends({}, mergedTheme, colorSchemes[resolvedColorScheme], {\n      components,\n      colorSchemes,\n      vars: rootVars,\n      spacing: themeProp.spacing ? createSpacing(themeProp.spacing) : systemSpacing,\n      breakpoints: themeProp.breakpoints ? createBreakpoints(themeProp.breakpoints) : systemBreakpoints\n    });\n    const styleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars\n      } = cssVarsParser(scheme, {\n        prefix,\n        basePrefix: designSystemPrefix,\n        shouldSkipGeneratingVar\n      });\n      mergedTheme.vars = deepmerge(mergedTheme.vars, vars);\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        styleSheet[':root'] = css;\n      } else {\n        styleSheet[`[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    React.useEffect(() => {\n      if (colorScheme) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        document.documentElement.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute]);\n    useEnhancedEffect(() => {\n      if (!mode || !enableColorScheme) {\n        return undefined;\n      }\n\n      const priorColorScheme = document.documentElement.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        document.documentElement.style.setProperty('color-scheme', systemMode);\n      } else {\n        document.documentElement.style.setProperty('color-scheme', mode);\n      }\n\n      return () => {\n        document.documentElement.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode]);\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        const css = document.createElement('style');\n        css.appendChild(document.createTextNode(DISABLE_CSS_TRANSITION));\n        document.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(document.body))();\n\n        timer = setTimeout(() => {\n          document.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode,\n        setMode,\n        lightColorScheme,\n        darkColorScheme,\n        colorScheme,\n        setColorScheme,\n        allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          ':root': rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: styleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: mergedTheme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * CSS variable prefix.\n     */\n    prefix: PropTypes.string,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}